################################################################################
# Starlab RNN-compression : Lowrank and group-lowrank rnn
#
# Author: Donghae Jang (jangdonghae@gmail.com), Seoul National University
#         U Kang (ukang@snu.ac.kr), Seoul National University
#
# Version : 1.0
# Date : Nov 10, 2020
# Main Contact: Donghae Jang
#
# This software is free of charge under research purposes.
# For commercial purposes, please contact the authors.
#
################################################################################


1. General information

This project is for Starlab RNN-compression which propose group-lowrank compression for RNN model,
and it's implementation for training and testing lowrank and group-lowrank compression for RNN model

2. How to run CTTP

IMPORTANT!
- Before you use it, please check that the script files is executable. If not,
you may manually modify the permission of scripts or you may type "make install"
to do the same work.
- You may type "make demo" if you want to just try CTTP.
- Hadoop and Java should be installed in your system in advance.

To run CTTP, you need to do the followings:
- prepare a graph edge file in a HDFS directory.
  The graph edge file is a plain text file where each line is in "NODE1 DELIMITER
  NODE2" format. The delimiter can be a tab, a space, or a comma.
  The graph should be an undirected simple graph; that is, the edge file must
  not contain any duplicate edge and any self loop edge. CTTP considers that
  two edges (a, b) and (b, a) are the same; thus, only one of the two edges
  (a, b) and (b, a) should exist.

  For example, this is the sample edge file 'cttp_sample.edge'

   0    1
   0    2
   0    3
   1    2
   1    3
   1    5
   2    3
   2    4
   2    6
   4    6

- execute ./cttp.sh
  Usage: ./cttp.sh [OPTIONS] [INPUT (EDGE LIST FILE)]
  Enumerate triangles in a graph

    -o[OUTPUT]     --output[OUTPUT]         set the output path of the triangle
                                            list. (default: [INPUT].triangle)
    -l[LOG]        --log[LOG]               set the path of the log file.
                                            (default: [INPUT].log)
    -p[PARTITIONS] --partitions[PARTITIONS] set the number of partitions.
    -r[ROUNDS]     --rounds[ROUNDS]         set the number of rounds.
                                            (default: the same as the number
                                            of partitions)
    -s[STARTROUND] --start[STARTROUND]      set the first round to start the
                                            algorithm.
    -i[ITERATIONS] --iterations[ITERATIONS] set the iteration number.
    -M[MAPTASKS]   --maptasks[MAPTASKS]     set the number of map tasks.
    -R[MAPTASKS]   --reducetasks[MAPTASKS]  set the number of reduce tasks.

  Example:
    ./cttp.sh path/to/triangle/file

You can find the output of CTTP in the HDFS directory specified by -o option
after execution. Each line of the output represents a triangle and the format is
"NODE1 TAB NODE2 TAB NODE3".

You can test CTTP with ./do_cttp.sh.
The script executes CTTP with a simple graph (cttp_sample.edge).
The result is stored in the HDFS path cttp_edge.triangle.
You can check the output with the following command.

$ hadoop fs -cat cttp_edge.triangle/0/*
0       1       3
0       1       2
3       1       2
4       2       6
0       2       3

If you see the output shown above, you can be assured that CTTP has finished successfully.
Note that the '0' after cttp_edge.triangle/ means the triangle enumeration finished at round 0
since the graph is very small. Running CTTP on larger graphs would require multiple rounds;
in that case the output of a round x will be stored in /x subdirectory of the base output path.


3. Rebuilding source codes

CTTP distribution includes the source code. You can modify the code and rebuild
the code. The source codes are in 'src' directory.
Since the binary file CTTP.jar already exists in 'jar' directory, normally you
don't need to build the code again. Thus, this is the instruction when you
modify the source code and build it.
To build the source code, use the script 'compile_cttp.sh'. When you
execute the script, it automatically compile the source codes in 'src' and make
a jar file CTTP.jar in 'jar' directory. Usually, the script automatically finds
the path for hadoop core library file; but if you want to designate the path,
set the environment variable $HADOOP_CORE to the path.

