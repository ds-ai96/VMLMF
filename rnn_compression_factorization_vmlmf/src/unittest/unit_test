import sys
sys.path.append('./')
import unittest
import torch
from models.vmlmf import *
from models.vmlmf_group import *

# problem setting
in_sz=77
hid_sz=180
i2i_rank=8
h2h_rank=6
h2h_g_ranks=[2,4]
x=torch.randn([81,24,77])

# model
vmmodelc=Net(77, layer_sizes=[180], wRank=8, uRanks=6, model=myLSTM,cell=myVMLMF_CELL)
vmmodelg=Net(77, layer_sizes=[180], wRank=8, uRanks=[2, 4], model=myLSTM,cell=myVMLMFCell_g2)

class TestVMLMF(unittest.TestCase):
    def test01_mmfc_dia_vec_size(self):
        self.assertEqual(vmmodelc.cell.dia_x.shape,(1,77))  # add assertion here
        self.assertEqual(vmmodelc.cell.dia_x.shape, (1, 180))
        
    def test02_mmfc_weight_shape(self):
        self.assertEqual(vmmodelc.cell.U_x.shape,(in_sz,i2i_rank))  # add assertion here
        self.assertEqual(vmmodelc.cell.U_h.shape,(hid_sz,h2h_rank))
        self.assertEqual(vmmodelc.cell.V_x.shape,(4*hid_sz,i2i_rank))  # add assertion here
        self.assertEqual(vmmodelc.cell.V_h.shape,(4*hid_sz,h2h_rank))
        
    def test03_mmfc_forward(self):
        computed=vmmodelc.forward(x)
        self.assertEqual(computed.shape,(81,18))  # add assertion here
        
    def test04_mmfg_dia_vec_size(self):
        self.assertEqual(vmmodelg.cell.layers['dia_x'].shape,(1,77))  # add assertion here
        self.assertEqual(vmmodelg.cell.layers['dia_h'].shape, (1, 180))
        
    def test05_mmfg_weight_shape(self):
        self.assertEqual(vmmodelg.cell.layers['Ux'].shape,(in_sz,i2i_rank))  # add assertion here
        self.assertEqual(vmmodelg.cell.layers['Uh_0'].shape,(2,int(hid_sz/2),h2h_g_ranks[0]))
        self.assertEqual(vmmodelg.cell.layers['Uh_1'].shape, (2, int(hid_sz / 2), h2h_g_ranks[1]))
        self.assertEqual(vmmodelg.cell.layers['Vx'].shape,(4*hid_sz,i2i_rank))  # add assertion here
        self.assertEqual(vmmodelg.cell.layers['Vh_0'].shape, (2, h2h_g_ranks[0],4*int(hid_sz/g)))
        self.assertEqual(vmmodelg.cell.layers['Vh_1'].shape, (2, h2h_g_ranks[1],4*int(hid_sz/g)))
        
    def test06_mmfg_forward(self):
        computed = vmmodelc.forward(x)
        self.assertEqual(computed.shape, (81, 18))  # add assertion here

if __name__ == '__main__':
    unittest.main()
